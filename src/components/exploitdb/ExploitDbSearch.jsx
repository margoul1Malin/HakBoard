import React, { useState, useEffect, useRef } from 'react';
import { FiSearch, FiFilter, FiExternalLink, FiInfo, FiCheck, FiX, FiBookmark, FiSave } from 'react-icons/fi';
import { exploitDbService } from '../../services/exploitDbService';
import { savedExploitsService } from '../../services/savedExploitsService';
import { useNotification } from '../../context/NotificationContext';
import './ExploitDbSearch.css';

const ExploitDbSearch = () => {
  // Référence pour les champs de recherche
  const searchInputRef = useRef(null);
  
  // Contexte de notification
  const { showSuccess, showError } = useNotification();
  
  // États pour la recherche
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    type: '',
    platform: '',
    verified: undefined
  });
  const [showFilters, setShowFilters] = useState(false);
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedExploit, setSelectedExploit] = useState(null);
  const [exploitDetails, setExploitDetails] = useState(null);
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [savedStatus, setSavedStatus] = useState({});

  // Options pour les filtres
  const typeOptions = ['remote', 'webapps', 'local', 'dos'];
  const platformOptions = ['Windows', 'Linux', 'PHP', 'Multiple', 'Java', 'Python'];

  // Vérifier quels exploits sont sauvegardés
  useEffect(() => {
    if (results.length > 0) {
      const status = {};
      results.forEach(exploit => {
        status[exploit.id] = savedExploitsService.isExploitSaved(exploit.id);
      });
      setSavedStatus(status);
    }
  }, [results]);

  // Effectuer la recherche
  const handleSearch = async (e) => {
    e?.preventDefault();
    
    if (!searchTerm.trim()) {
      setError('Veuillez entrer un terme de recherche');
      return;
    }
    
    setLoading(true);
    setError(null);
    setResults([]);
    setSelectedExploit(null);
    setExploitDetails(null);
    
    try {
      const response = await exploitDbService.searchExploits(searchTerm, filters);
      
      if (response.success) {
        setResults(response.data);
      } else {
        setError(response.message);
      }
    } catch (err) {
      setError('Erreur lors de la recherche: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  // Réinitialiser les filtres
  const resetFilters = () => {
    setFilters({
      type: '',
      platform: '',
      verified: undefined
    });
  };

  // Obtenir les détails d'un exploit
  const fetchExploitDetails = async (exploitId) => {
    setLoadingDetails(true);
    setError(null);
    
    try {
      const response = await exploitDbService.getExploitDetails(exploitId);
      
      if (response.success) {
        setExploitDetails(response.data);
      } else {
        setError(response.message);
      }
    } catch (err) {
      setError('Erreur lors de la récupération des détails: ' + err.message);
    } finally {
      setLoadingDetails(false);
    }
  };

  // Sélectionner un exploit pour voir les détails
  const handleSelectExploit = (exploit) => {
    setSelectedExploit(exploit);
    fetchExploitDetails(exploit.id);
  };

  // Revenir à la liste des résultats
  const handleBackToResults = () => {
    setSelectedExploit(null);
    setExploitDetails(null);
  };

  // Sauvegarder un exploit
  const handleSaveExploit = (exploit) => {
    try {
      const success = savedExploitsService.saveExploit(exploit);
      
      if (success) {
        setSavedStatus(prev => ({
          ...prev,
          [exploit.id]: true
        }));
        
        showSuccess(`L'exploit "${exploit.title}" a été sauvegardé avec succès.`);
      } else {
        showError('Erreur lors de la sauvegarde de l\'exploit.');
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde:', error);
      showError('Une erreur est survenue lors de la sauvegarde.');
    }
  };

  // Gestionnaire de changement pour le champ de recherche
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  return (
    <div className="exploit-db-search">
      <h1 className="text-2xl font-bold mb-6">Recherche d'Exploits</h1>
      
      {/* Formulaire de recherche */}
      <form 
        onSubmit={handleSearch}
        className="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow p-4"
      >
        <div className="flex items-center mb-4">
          <div className="flex-1 relative">
            <input
              type="text"
              ref={searchInputRef}
              value={searchTerm}
              onChange={handleSearchChange}
              placeholder="Rechercher des vulnérabilités (ex: SQL Injection, CVE-2023-1234, WordPress...)"
              className="w-full p-3 pl-10 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            />
            <FiSearch className="absolute left-3 top-3.5 text-gray-400" />
          </div>
          <button
            type="button"
            onClick={() => setShowFilters(!showFilters)}
            className="ml-2 p-3 bg-gray-100 dark:bg-gray-700 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600"
            title="Filtres"
          >
            <FiFilter className="text-gray-600 dark:text-gray-300" />
          </button>
          <button
            type="submit"
            className="ml-2 p-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
          >
            Rechercher
          </button>
        </div>
        
        {/* Filtres */}
        {showFilters && (
          <div className="p-4 bg-gray-50 dark:bg-gray-700 rounded-md mb-4">
            <div className="flex flex-wrap gap-4">
              <div className="flex-1 min-w-[200px]">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Type d'exploit
                </label>
                <select
                  value={filters.type}
                  onChange={(e) => setFilters({...filters, type: e.target.value})}
                  className="w-full p-2 border rounded-md dark:bg-gray-800 dark:border-gray-600 dark:text-white"
                >
                  <option value="">Tous les types</option>
                  {typeOptions.map(type => (
                    <option key={type} value={type}>{type}</option>
                  ))}
                </select>
              </div>
              
              <div className="flex-1 min-w-[200px]">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Plateforme
                </label>
                <select
                  value={filters.platform}
                  onChange={(e) => setFilters({...filters, platform: e.target.value})}
                  className="w-full p-2 border rounded-md dark:bg-gray-800 dark:border-gray-600 dark:text-white"
                >
                  <option value="">Toutes les plateformes</option>
                  {platformOptions.map(platform => (
                    <option key={platform} value={platform}>{platform}</option>
                  ))}
                </select>
              </div>
              
              <div className="flex-1 min-w-[200px]">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Vérifié
                </label>
                <select
                  value={filters.verified === undefined ? '' : filters.verified.toString()}
                  onChange={(e) => {
                    const value = e.target.value;
                    setFilters({
                      ...filters, 
                      verified: value === '' ? undefined : value === 'true'
                    });
                  }}
                  className="w-full p-2 border rounded-md dark:bg-gray-800 dark:border-gray-600 dark:text-white"
                >
                  <option value="">Tous</option>
                  <option value="true">Vérifié</option>
                  <option value="false">Non vérifié</option>
                </select>
              </div>
            </div>
            
            <div className="mt-3 flex justify-end">
              <button
                type="button"
                onClick={resetFilters}
                className="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
              >
                Réinitialiser les filtres
              </button>
            </div>
          </div>
        )}
      </form>
      
      {/* Message d'erreur */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}
      
      {/* Indicateur de chargement */}
      {loading && (
        <div className="mb-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow text-center">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
          <p className="mt-2 text-gray-600 dark:text-gray-400">Recherche en cours...</p>
        </div>
      )}
      
      {/* Résultats de recherche */}
      {!loading && !selectedExploit && results.length > 0 && (
        <div className="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
          <div className="p-4 border-b dark:border-gray-700">
            <h2 className="text-lg font-semibold">
              {results.length} résultat{results.length > 1 ? 's' : ''} trouvé{results.length > 1 ? 's' : ''}
            </h2>
          </div>
          
          <ul className="divide-y dark:divide-gray-700">
            {results.map(exploit => (
              <li 
                key={exploit.id}
                className="p-4 hover:bg-gray-50 dark:hover:bg-gray-700"
              >
                <div className="flex items-start">
                  <div className="flex-1 cursor-pointer" onClick={() => handleSelectExploit(exploit)}>
                    <h3 className="font-medium text-indigo-600 dark:text-indigo-400">
                      {exploit.title}
                    </h3>
                    <div className="mt-1 flex items-center text-sm text-gray-500 dark:text-gray-400">
                      <span className="mr-3">ID: {exploit.id}</span>
                      <span className="mr-3">Date: {exploit.date}</span>
                      <span className="mr-3">CVE: {exploit.cve || 'N/A'}</span>
                    </div>
                    <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
                      {exploit.description}
                    </p>
                    <div className="mt-2 flex flex-wrap gap-2">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">
                        {exploit.type}
                      </span>
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">
                        {exploit.platform}
                      </span>
                      {exploit.verified ? (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300">
                          <FiCheck className="mr-1" /> Vérifié
                        </span>
                      ) : (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300">
                          <FiX className="mr-1" /> Non vérifié
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="flex flex-col items-center ml-4">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleSaveExploit(exploit);
                      }}
                      className={`p-2 rounded-full ${
                        savedStatus[exploit.id]
                          ? 'bg-indigo-100 text-indigo-600 dark:bg-indigo-900 dark:text-indigo-300'
                          : 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 hover:bg-indigo-50 hover:text-indigo-500 dark:hover:bg-indigo-900 dark:hover:text-indigo-300'
                      }`}
                      title={savedStatus[exploit.id] ? "Exploit sauvegardé" : "Sauvegarder cet exploit"}
                    >
                      <FiBookmark size={18} className={savedStatus[exploit.id] ? "fill-current" : ""} />
                    </button>
                    <a
                      href={exploit.edbUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      onClick={(e) => e.stopPropagation()}
                      className="mt-2 p-2 rounded-full bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                      title="Voir sur Exploit-DB"
                    >
                      <FiExternalLink size={18} />
                    </a>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
      
      {/* Aucun résultat */}
      {!loading && !selectedExploit && results.length === 0 && searchTerm && (
        <div className="mb-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow text-center">
          <p className="text-gray-600 dark:text-gray-400">
            Aucun résultat trouvé pour "{searchTerm}".
          </p>
        </div>
      )}
      
      {/* Détails d'un exploit */}
      {selectedExploit && (
        <div className="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
          <div className="p-4 border-b dark:border-gray-700 flex justify-between items-center">
            <h2 className="text-lg font-semibold">Détails de l'exploit</h2>
            <div className="flex items-center">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  handleSaveExploit(exploitDetails || selectedExploit);
                }}
                className={`mr-3 p-2 rounded-full ${
                  savedStatus[selectedExploit.id]
                    ? 'bg-indigo-100 text-indigo-600 dark:bg-indigo-900 dark:text-indigo-300'
                    : 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 hover:bg-indigo-50 hover:text-indigo-500 dark:hover:bg-indigo-900 dark:hover:text-indigo-300'
                }`}
                title={savedStatus[selectedExploit.id] ? "Exploit sauvegardé" : "Sauvegarder cet exploit"}
              >
                <FiSave size={18} />
              </button>
              <button
                onClick={handleBackToResults}
                className="text-sm text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300"
              >
                Retour aux résultats
              </button>
            </div>
          </div>
          
          {loadingDetails ? (
            <div className="p-6 text-center">
              <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
              <p className="mt-2 text-gray-600 dark:text-gray-400">Chargement des détails...</p>
            </div>
          ) : exploitDetails ? (
            <div className="p-4">
              <h3 className="text-xl font-semibold text-indigo-600 dark:text-indigo-400 mb-2">
                {exploitDetails.title}
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    <span className="font-medium">ID:</span> {exploitDetails.id}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    <span className="font-medium">Date:</span> {exploitDetails.date}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    <span className="font-medium">Auteur:</span> {exploitDetails.author}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    <span className="font-medium">CVE:</span> {exploitDetails.cve || 'N/A'}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    <span className="font-medium">Type:</span> {exploitDetails.type}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    <span className="font-medium">Plateforme:</span> {exploitDetails.platform}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    <span className="font-medium">Vérifié:</span> {exploitDetails.verified ? 'Oui' : 'Non'}
                  </p>
                </div>
              </div>
              
              <div className="mb-4">
                <h4 className="font-medium mb-2">Description</h4>
                <p className="text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
                  {exploitDetails.description}
                </p>
              </div>
              
              {exploitDetails.code && (
                <div className="mb-4">
                  <h4 className="font-medium mb-2">Code d'exploitation</h4>
                  <pre className="bg-gray-900 text-gray-100 p-4 rounded-md overflow-x-auto text-sm">
                    {exploitDetails.code}
                  </pre>
                </div>
              )}
              
              {exploitDetails.references && exploitDetails.references.length > 0 && (
                <div className="mb-4">
                  <h4 className="font-medium mb-2">Références</h4>
                  <ul className="list-disc list-inside text-indigo-600 dark:text-indigo-400">
                    {exploitDetails.references.map((ref, index) => (
                      <li key={index} className="mb-1">
                        <a 
                          href={ref} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="hover:underline"
                        >
                          {ref}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              
              {exploitDetails.tags && exploitDetails.tags.length > 0 && (
                <div>
                  <h4 className="font-medium mb-2">Tags</h4>
                  <div className="flex flex-wrap gap-2">
                    {exploitDetails.tags.map((tag, index) => (
                      <span 
                        key={index}
                        className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="p-6 text-center">
              <p className="text-gray-600 dark:text-gray-400">
                Impossible de charger les détails de l'exploit.
              </p>
            </div>
          )}
        </div>
      )}
      
      {/* Informations sur Exploit-DB */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <div className="flex items-start">
          <FiInfo className="text-indigo-600 dark:text-indigo-400 mt-1 mr-3" />
          <div>
            <h3 className="font-medium">À propos d'Exploit-DB</h3>
            <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
              Exploit-DB est une archive d'exploits et de logiciels vulnérables maintenue par Offensive Security.
              Cette interface vous permet de rechercher des vulnérabilités connues et des exploits pour diverses plateformes et applications.
            </p>
            <p className="mt-2 text-sm">
              <a 
                href="https://www.exploit-db.com/" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center"
              >
                Visiter Exploit-DB <FiExternalLink className="ml-1" />
              </a>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExploitDbSearch; 
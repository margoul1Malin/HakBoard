import React, { useState, useEffect, useRef } from 'react';
import { FiTrash2, FiEdit, FiExternalLink, FiInfo, FiSearch, FiCheck, FiX } from 'react-icons/fi';
import { savedExploitsService } from '../../services/savedExploitsService';
import { useNotification } from '../../context/NotificationContext';
import './ExploitDbSearch.css'; // Réutilisation des styles

const SavedExploits = () => {
  // Référence pour le champ de recherche
  const searchInputRef = useRef(null);
  
  // Contexte de notification
  const { showSuccess, showError, showWarning } = useNotification();
  
  const [savedExploits, setSavedExploits] = useState([]);
  const [selectedExploit, setSelectedExploit] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [notes, setNotes] = useState('');
  const [isEditing, setIsEditing] = useState(false);

  // Charger les exploits sauvegardés
  useEffect(() => {
    loadSavedExploits();
  }, []);

  // Fonction pour charger les exploits sauvegardés
  const loadSavedExploits = () => {
    const exploits = savedExploitsService.getSavedExploits();
    setSavedExploits(exploits);
  };

  // Filtrer les exploits en fonction du terme de recherche
  const filteredExploits = savedExploits.filter(exploit => {
    const searchLower = searchTerm.toLowerCase();
    return (
      exploit.title.toLowerCase().includes(searchLower) ||
      (exploit.description && exploit.description.toLowerCase().includes(searchLower)) ||
      (exploit.cve && exploit.cve.toLowerCase().includes(searchLower)) ||
      (exploit.platform && exploit.platform.toLowerCase().includes(searchLower)) ||
      (exploit.type && exploit.type.toLowerCase().includes(searchLower))
    );
  });

  // Sélectionner un exploit pour voir les détails
  const handleSelectExploit = (exploit) => {
    setSelectedExploit(exploit);
    setNotes(exploit.notes || '');
    setIsEditing(false);
  };

  // Revenir à la liste des exploits sauvegardés
  const handleBackToList = () => {
    setSelectedExploit(null);
    setNotes('');
    setIsEditing(false);
  };

  // Supprimer un exploit sauvegardé
  const handleDeleteExploit = (savedId, event) => {
    event.stopPropagation();
    
    // Fonction pour confirmer la suppression
    const confirmDelete = () => {
      try {
        const success = savedExploitsService.deleteSavedExploit(savedId);
        
        if (success) {
          if (selectedExploit && selectedExploit.savedId === savedId) {
            setSelectedExploit(null);
          }
          loadSavedExploits();
          showSuccess('L\'exploit a été supprimé avec succès.');
        } else {
          showError('Erreur lors de la suppression de l\'exploit.');
        }
      } catch (error) {
        console.error('Erreur lors de la suppression:', error);
        showError('Une erreur est survenue lors de la suppression.');
      }
    };
    
    // Afficher un message de confirmation avec des boutons personnalisés
    const message = 'Êtes-vous sûr de vouloir supprimer cet exploit de vos favoris ?';
    const confirmButton = <button onClick={confirmDelete} className="ml-2 px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700">Supprimer</button>;
    const cancelButton = <button className="ml-2 px-3 py-1 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">Annuler</button>;
    
    showWarning(
      <div>
        <p>{message}</p>
        <div className="flex justify-end mt-2">
          {cancelButton}
          {confirmButton}
        </div>
      </div>,
      5000
    );
  };

  // Mettre à jour les notes d'un exploit
  const handleUpdateNotes = () => {
    if (!selectedExploit) return;
    
    try {
      const success = savedExploitsService.updateExploitNotes(selectedExploit.savedId, notes);
      
      if (success) {
        setIsEditing(false);
        loadSavedExploits();
        
        // Mettre à jour l'exploit sélectionné avec les nouvelles notes
        const updatedExploit = { ...selectedExploit, notes };
        setSelectedExploit(updatedExploit);
        
        showSuccess('Notes mises à jour avec succès.');
      } else {
        showError('Erreur lors de la mise à jour des notes.');
      }
    } catch (error) {
      console.error('Erreur lors de la mise à jour des notes:', error);
      showError('Une erreur est survenue lors de la mise à jour des notes.');
    }
  };

  // Gestionnaire de changement pour le champ de recherche
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  // Effacer tout l'historique
  const clearHistory = () => {
    // Fonction pour confirmer la suppression de tous les exploits
    const confirmClearAll = () => {
      try {
        // Supprimer tous les exploits
        savedExploits.forEach(exploit => {
          savedExploitsService.deleteSavedExploit(exploit.savedId);
        });
        
        // Recharger la liste (qui sera vide)
        loadSavedExploits();
        setSelectedExploit(null);
        
        showSuccess('Historique des exploits effacé avec succès.');
      } catch (error) {
        console.error('Erreur lors de l\'effacement de l\'historique:', error);
        showError('Une erreur est survenue lors de l\'effacement de l\'historique.');
      }
    };
    
    // Afficher un message de confirmation avec des boutons personnalisés
    const message = 'Êtes-vous sûr de vouloir effacer tous les exploits sauvegardés ?';
    const confirmButton = <button onClick={confirmClearAll} className="ml-2 px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700">Effacer tout</button>;
    const cancelButton = <button className="ml-2 px-3 py-1 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">Annuler</button>;
    
    showWarning(
      <div>
        <p>{message}</p>
        <div className="flex justify-end mt-2">
          {cancelButton}
          {confirmButton}
        </div>
      </div>,
      5000
    );
  };

  return (
    <div className="saved-exploits">
      <h1 className="text-2xl font-bold mb-6">Exploits Sauvegardés</h1>
      
      {/* Recherche */}
      {!selectedExploit && (
        <div className="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow p-4">
          <div className="relative">
            <input
              type="text"
              ref={searchInputRef}
              value={searchTerm}
              onChange={handleSearchChange}
              placeholder="Rechercher dans vos exploits sauvegardés..."
              className="w-full p-3 pl-10 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            />
            <FiSearch className="absolute left-3 top-3.5 text-gray-400" />
          </div>
        </div>
      )}
      
      {/* Liste des exploits sauvegardés */}
      {!selectedExploit && (
        <>
          {filteredExploits.length > 0 ? (
            <div className="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
              <div className="p-4 border-b dark:border-gray-700 flex justify-between">
                <h2 className="text-lg font-semibold">
                  {filteredExploits.length} exploit{filteredExploits.length > 1 ? 's' : ''} sauvegardé{filteredExploits.length > 1 ? 's' : ''}
                </h2>
                {filteredExploits.length > 0 && (
                  <button
                    onClick={clearHistory}
                    className="text-sm text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
                  >
                    Effacer tout
                  </button>
                )}
              </div>
              
              <ul className="divide-y dark:divide-gray-700">
                {filteredExploits.map(exploit => (
                  <li 
                    key={exploit.savedId}
                    className="p-4 hover:bg-gray-50 dark:hover:bg-gray-700"
                  >
                    <div className="flex items-start">
                      <div 
                        className="flex-1 cursor-pointer" 
                        onClick={() => handleSelectExploit(exploit)}
                      >
                        <h3 className="font-medium text-indigo-600 dark:text-indigo-400">
                          {exploit.title}
                        </h3>
                        <div className="mt-1 flex items-center text-sm text-gray-500 dark:text-gray-400">
                          <span className="mr-3">ID: {exploit.id}</span>
                          <span className="mr-3">Date: {exploit.date}</span>
                          <span className="mr-3">CVE: {exploit.cve || 'N/A'}</span>
                        </div>
                        {exploit.notes && (
                          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400 italic">
                            Notes: {exploit.notes.length > 100 ? `${exploit.notes.substring(0, 100)}...` : exploit.notes}
                          </p>
                        )}
                        <div className="mt-2 flex flex-wrap gap-2">
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">
                            {exploit.type}
                          </span>
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">
                            {exploit.platform}
                          </span>
                          {exploit.verified ? (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300">
                              <FiCheck className="mr-1" /> Vérifié
                            </span>
                          ) : (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300">
                              <FiX className="mr-1" /> Non vérifié
                            </span>
                          )}
                        </div>
                      </div>
                      <div className="flex flex-col items-center ml-4">
                        <button
                          onClick={(e) => handleDeleteExploit(exploit.savedId, e)}
                          className="p-2 rounded-full bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 hover:bg-red-50 hover:text-red-500 dark:hover:bg-red-900 dark:hover:text-red-300"
                          title="Supprimer cet exploit"
                        >
                          <FiTrash2 size={18} />
                        </button>
                        <a
                          href={exploit.edbUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                          onClick={(e) => e.stopPropagation()}
                          className="mt-2 p-2 rounded-full bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                          title="Voir sur Exploit-DB"
                        >
                          <FiExternalLink size={18} />
                        </a>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          ) : searchTerm ? (
            <div className="mb-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow text-center">
              <p className="text-gray-600 dark:text-gray-400">
                Aucun exploit sauvegardé ne correspond à "{searchTerm}".
              </p>
            </div>
          ) : (
            <div className="mb-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow text-center">
              <p className="text-gray-600 dark:text-gray-400">
                Vous n'avez pas encore sauvegardé d'exploits.
              </p>
              <p className="mt-2 text-gray-600 dark:text-gray-400">
                Utilisez la recherche d'exploits pour en trouver et les sauvegarder ici.
              </p>
            </div>
          )}
        </>
      )}
      
      {/* Détails d'un exploit */}
      {selectedExploit && (
        <div className="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
          <div className="p-4 border-b dark:border-gray-700 flex justify-between items-center">
            <h2 className="text-lg font-semibold">Détails de l'exploit</h2>
            <div className="flex items-center">
              <button
                onClick={(e) => handleDeleteExploit(selectedExploit.savedId, e)}
                className="mr-3 p-2 rounded-full bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 hover:bg-red-50 hover:text-red-500 dark:hover:bg-red-900 dark:hover:text-red-300"
                title="Supprimer cet exploit"
              >
                <FiTrash2 size={18} />
              </button>
              <button
                onClick={handleBackToList}
                className="text-sm text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300"
              >
                Retour à la liste
              </button>
            </div>
          </div>
          
          <div className="p-4">
            <h3 className="text-xl font-semibold text-indigo-600 dark:text-indigo-400 mb-2">
              {selectedExploit.title}
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <span className="font-medium">ID:</span> {selectedExploit.id}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <span className="font-medium">Date:</span> {selectedExploit.date}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <span className="font-medium">Auteur:</span> {selectedExploit.author || 'Non spécifié'}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <span className="font-medium">CVE:</span> {selectedExploit.cve || 'N/A'}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <span className="font-medium">Type:</span> {selectedExploit.type}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <span className="font-medium">Plateforme:</span> {selectedExploit.platform}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <span className="font-medium">Vérifié:</span> {selectedExploit.verified ? 'Oui' : 'Non'}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <span className="font-medium">Date de sauvegarde:</span> {new Date(selectedExploit.savedAt).toLocaleString()}
                </p>
              </div>
            </div>
            
            <div className="mb-4">
              <h4 className="font-medium mb-2">Description</h4>
              <p className="text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
                {selectedExploit.description}
              </p>
            </div>
            
            <div className="mb-4">
              <div className="flex justify-between items-center mb-2">
                <h4 className="font-medium">Notes personnelles</h4>
                {!isEditing ? (
                  <button
                    onClick={() => setIsEditing(true)}
                    className="text-sm text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300 flex items-center"
                  >
                    <FiEdit className="mr-1" /> Modifier
                  </button>
                ) : (
                  <button
                    onClick={handleUpdateNotes}
                    className="text-sm text-green-600 dark:text-green-400 hover:text-green-800 dark:hover:text-green-300 flex items-center"
                  >
                    <FiCheck className="mr-1" /> Enregistrer
                  </button>
                )}
              </div>
              
              {isEditing ? (
                <textarea
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  className="w-full p-3 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white min-h-[100px]"
                  placeholder="Ajoutez vos notes personnelles ici..."
                />
              ) : (
                <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-md min-h-[100px]">
                  {selectedExploit.notes ? (
                    <p className="text-gray-600 dark:text-gray-400 whitespace-pre-wrap">
                      {selectedExploit.notes}
                    </p>
                  ) : (
                    <p className="text-gray-400 dark:text-gray-500 italic">
                      Aucune note ajoutée. Cliquez sur "Modifier" pour ajouter des notes.
                    </p>
                  )}
                </div>
              )}
            </div>
            
            {selectedExploit.code && (
              <div className="mb-4">
                <h4 className="font-medium mb-2">Code d'exploitation</h4>
                <pre className="bg-gray-900 text-gray-100 p-4 rounded-md overflow-x-auto text-sm">
                  {selectedExploit.code}
                </pre>
              </div>
            )}
            
            {selectedExploit.references && selectedExploit.references.length > 0 && (
              <div className="mb-4">
                <h4 className="font-medium mb-2">Références</h4>
                <ul className="list-disc list-inside text-indigo-600 dark:text-indigo-400">
                  {selectedExploit.references.map((ref, index) => (
                    <li key={index} className="mb-1">
                      <a 
                        href={ref} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="hover:underline"
                      >
                        {ref}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            <div className="mt-4">
              <a
                href={selectedExploit.edbUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center text-indigo-600 dark:text-indigo-400 hover:underline"
              >
                Voir sur Exploit-DB <FiExternalLink className="ml-1" />
              </a>
            </div>
          </div>
        </div>
      )}
      
      {/* Informations sur les exploits sauvegardés */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <div className="flex items-start">
          <FiInfo className="text-indigo-600 dark:text-indigo-400 mt-1 mr-3" />
          <div>
            <h3 className="font-medium">À propos des exploits sauvegardés</h3>
            <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
              Cette section vous permet de gérer les exploits que vous avez sauvegardés lors de vos recherches.
              Vous pouvez ajouter des notes personnelles à chaque exploit pour faciliter votre travail.
            </p>
            <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
              Les exploits sont sauvegardés localement sur votre ordinateur et ne sont pas partagés avec d'autres utilisateurs.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SavedExploits; 